#!/usr/bin/perl

use strict;
use warnings;

use FindBin qw ($Bin);
use lib $Bin;

use Proc::Daemon;
use POSIX;
use Time::HiRes qw ( gettimeofday );
use Comfort::Serial;
use Net::MQTT::Simple;

use constant COMFORT_PORT => '/dev/ttyUSB0';
use constant COMFORT_RECEIVE_TIMEOUT => 100;
use constant PASSWORD => '0000';
use constant MQTT_HOST => 'localhost';
use constant MQTT_COMFORT_PUBLISH_TOPIC => "comfort/status";
use constant MQTT_COMFORT_SUBSCRIBE_TOPIC1 => "comfort/set";
use constant MQTT_COMFORT_SUBSCRIBE_TOPIC2 => "comfort/get";
use constant MQTT_CBUS_PUBLISH_TOPIC => "cbus/status";
use constant MQTT_CBUS_SUBSCRIBE_TOPIC1 => "cbus/set";
use constant MQTT_CBUS_SUBSCRIBE_TOPIC2 => "cbus/get";
use constant MQTT_TICK_TIMEOUT => 100;
use constant ALLOWED_TIME_DEVIATION => 2;

# AM/AR alarm parameter types
use constant ALARM_NONE => 0;
use constant ALARM_ZONE => 1;
use constant ALARM_USER => 2;
use constant ALARM_ID   => 3;

# State topics for communicating with Home Assistant MQTT alarm
use constant HASS_STATE_TOPIC     => 'state';
use constant HASS_STATE_DISARMED  => 'disarmed';
use constant HASS_STATE_AWAY      => 'armed_away';
use constant HASS_STATE_HOME      => 'armed_home';
use constant HASS_STATE_NIGHT     => 'armed_night';
use constant HASS_STATE_PENDING   => 'pending';
use constant HASS_STATE_TRIGGERED => 'triggered';


$0 = 'comfort2mqtt';

our $daemon = 0;
our $comfortPort;
our $mqttHost;
our $logFileName;
while (my $arg = shift @ARGV)
{
	if ($arg eq '-d')
	{
		$daemon = 1;
	}
	elsif ($arg eq '-port')
	{
		$comfortPort = shift @ARGV;
	}
	elsif ($arg eq '-log')
	{
		$logFileName = shift @ARGV;
	}
	elsif ($arg eq '-m')
	{
		$mqttHost = shift @ARGV;
	}
}


$comfortPort //= COMFORT_PORT;
$mqttHost //= MQTT_HOST;
our %RETAIN_INPUT =
(
	 9 => 1,
	27 => 1,
);


our $comfort = Comfort::Serial->new ($comfortPort);
our %rampLookup =
(
	0  => $comfort->CBUS_RAMP_0,
	4  => $comfort->CBUS_RAMP_4,
	8  => $comfort->CBUS_RAMP_8,
	12 => $comfort->CBUS_RAMP_12,
	20 => $comfort->CBUS_RAMP_20,
	30 => $comfort->CBUS_RAMP_30,
	40 => $comfort->CBUS_RAMP_40,
	60 => $comfort->CBUS_RAMP_60,
);

our %OUTPUT_STATUS =
(
	'OFF' => $comfort->COMFORT_OUTPUT_OFF,
	'ON' => $comfort->COMFORT_OUTPUT_ON,
	'TOGGLE' => $comfort->COMFORT_OUTPUT_TOGGLE,
	'PULSE' => $comfort->COMFORT_OUTPUT_PULSE,
	'FLASH' => $comfort->COMFORT_OUTPUT_FLASH,
);

our %ARM_STATUS =
(
	'OFF'      => $comfort->COMFORT_ARM_OFF,
	'NIGHT'    => $comfort->COMFORT_ARM_NIGHT,
	'DAY'      => $comfort->COMFORT_ARM_DAY,
	'AWAY'     => $comfort->COMFORT_ARM_AWAY,
	'VACATION' => $comfort->COMFORT_ARM_VACATION,
);

our %HASS_ARM_STATE =
(
	$comfort->COMFORT_ARM_OFF       => HASS_STATE_DISARMED,
#	$comfort->COMFORT_ARM_NIGHT     => HASS_STATE_NIGHT,
#	$comfort->COMFORT_ARM_DAY       => HASS_STATE_HOME,
	$comfort->COMFORT_ARM_NIGHT     => HASS_STATE_HOME,
	$comfort->COMFORT_ARM_AWAY      => HASS_STATE_AWAY,
	$comfort->COMFORT_ARM_VACATION  => HASS_STATE_AWAY,
);

our %ENTRY_EXIT =
(
	$comfort->COMFORT_ENTRY_ALERT => 'entry',
	$comfort->COMFORT_EXIT_DELAY  => 'exit',
);

our %REPORT_TOPIC =
(
	'a?'   => 'alarm_info',
	'AL'   => 'alarm_type',
	'A?'   => 'analog_input',
	'AC'   => 'alarm_code',
	'AM'   => 'alarm',
	'AR'   => 'alarm_restored',
	'BP'   => 'beep',
	'BY'   => 'bypass',
	'B?'   => 'bypass_all',
	'CS'   => 'rs485_status',
	'CT'   => 'counter',
	'C?'   => 'counter',
	'DB'   => 'doorbell',
	'DT'   => 'date',
	'ER'   => 'open_zones',
	'EV'   => 'event',
	'EX'   => 'exit_entry_delay',
	'FL'   => 'flag',
	'F?'   => 'flag',
	'IP'   => 'input',
	'IR'   => 'infrared',
	'IX'   => 'irfrared_code',
	'KL'   => 'led',
	'K?'   => 'led',
	'LB'   => 'low_battery',
	'LR'   => 'login',
	'MD'   => 'arm',
	'M?'   => 'arm',
	'OP'   => 'output',
	'O?'   => 'output',
	'PT'   => 'pulse',
	'PS'   => 'engineer_code',
);


our %ALARM_TYPE =
(
	$comfort->COMFORT_ALARM_INTRUDER            => [ 'intruder',            1, ALARM_ZONE ],
	$comfort->COMFORT_ALARM_ZONE_TROUBLE        => [ 'zone_trouble',        1, ALARM_ZONE ],
	$comfort->COMFORT_ALARM_LOW_BATTERY         => [ 'low_battery',         0, ALARM_NONE ],
	$comfort->COMFORT_ALARM_POWER_FAIL          => [ 'power_fail',          0, ALARM_ID   ],
	$comfort->COMFORT_ALARM_PHONE_TROUBLE       => [ 'phone_trouble',       0, ALARM_NONE ],
	$comfort->COMFORT_ALARM_DURESS              => [ 'duress',              1, ALARM_USER ],
	$comfort->COMFORT_ALARM_ARM_FAIL            => [ 'arm_fail',            0, ALARM_USER ],
	$comfort->COMFORT_ALARM_SECURITY_OFF        => [ 'security_off',        0, ALARM_USER ],
	$comfort->COMFORT_ALARM_SYSTEM_ARMED        => [ 'system_armed',        0, ALARM_USER ],
	$comfort->COMFORT_ALARM_TAMPER              => [ 'tamper',              1, ALARM_ID   ],
	$comfort->COMFORT_ALARM_ENTRY_WARNING       => [ 'entry_warning',       0, ALARM_ZONE ],
	$comfort->COMFORT_ALARM_ALARM_ABORT         => [ 'alarm_abort',         0, ALARM_NONE ],
	$comfort->COMFORT_ALARM_SIREN_TAMPER        => [ 'siren_tamper',        1, ALARM_ID   ],
	$comfort->COMFORT_ALARM_BYPASS              => [ 'bypass',              0, ALARM_ZONE ],
	$comfort->COMFORT_ALARM_DIAL_TEST           => [ 'dial_test',           0, ALARM_USER ],
	$comfort->COMFORT_ALARM_ENTRY_ALERT         => [ 'entry_alert',         0, ALARM_ZONE ],
	$comfort->COMFORT_ALARM_FIRE                => [ 'fire',                1, ALARM_NONE ],
	$comfort->COMFORT_ALARM_PANIC               => [ 'panic',               1, ALARM_NONE ],
	$comfort->COMFORT_ALARM_GSM_TROUBLE         => [ 'gsm_trouble',         0, ALARM_ID   ],
	$comfort->COMFORT_ALARM_NEW_MESSAGE         => [ 'new_message',         0, ALARM_USER ],
	$comfort->COMFORT_ALARM_DOORBELL            => [ 'doorbell',            0, ALARM_ID   ],
	$comfort->COMFORT_ALARM_COMMUNICATIONS_FAIL => [ 'communications_fail', 0, ALARM_ID   ],
	$comfort->COMFORT_ALARM_SIGNIN_TAMPER       => [ 'signin_tamper',       0, ALARM_ID   ],
);

$comfort->SetLogger (\&ComfortLogger);
if ($daemon)
{
	Proc::Daemon::Init ({
		work_dir => $Bin,
		child_STDOUT => ($logFileName ? ">>$logFileName" : '/dev/null')
		});
}
elsif ($logFileName)
{
	open (STDOUT, '>>', $logFileName) or die "Could not open $logFileName: @!";
}

$| = 1;


our $mqtt = Net::MQTT::Simple->new ($mqttHost);
$mqtt->subscribe (MQTT_COMFORT_SUBSCRIBE_TOPIC1 . '/#', \&MqttComfortCallback);
$mqtt->subscribe (MQTT_COMFORT_SUBSCRIBE_TOPIC2 . '/#', \&MqttComfortCallback);
$mqtt->subscribe (MQTT_CBUS_SUBSCRIBE_TOPIC1 . '/#', \&MqttCbusCallback);
$mqtt->subscribe (MQTT_CBUS_SUBSCRIBE_TOPIC2 . '/#', \&MqttCbusCallback);


our $connected = 0;
our $reportsEnabled = 0;
our $loggedIn = 0;
our $adjustDateTime = 0;

sub Print (@)
{
	my ($secs, $usecs) = gettimeofday();
	print POSIX::strftime("%Y/%m/%d %H:%M:%S", localtime ($secs)), '.', sprintf ('%03d', int ($usecs/1000)), ' ', @_, "\n";
}

our $terminated = 0;
$SIG{INT} = $SIG{QUIT} = $SIG{TERM} = sub
{
	Print "Termination signal recived...";
	$terminated = 1;
};

Print "===================================================================";
Print "Starting up ....";

while (! $terminated)
{
	if (! $connected)
	{
		$loggedIn = 0;

		Print ("Connecting to ", MQTT_HOST, " ...");
		if (! $comfort->Connect())
		{
			Print "Coult no connect.  Retrying ...";
			sleep (1);
			next;
		}


		Print ("Connected.");
		$connected = 1;
	}

	if (! $loggedIn)
	{
		Print "Logging in ...";
		if (! $comfort->Login (PASSWORD))
		{
			Print "Could not login.  Retrying ...";
			sleep (1);
			next;
		}

		Print ("Logged in.");
		$loggedIn = 1;
	}

	if (! $reportsEnabled)
	{
		Print "Enabling reports ...";
		if (! $comfort->EnableReports (\&ComfortResultHandler))
		{
			Print "Could not enable reports.  Reconnecting ...";
			$comfort->Disconnect();
			$connected = 0;
			next;
		}

		Print ("Reports enabled.");
		$reportsEnabled = 1;

		$comfort->SetReportCallback ('CT', \&ComfortCTHandler);
		$comfort->SetReportCallback ('C?', \&ComfortCTHandler);
		$comfort->SetReportCallback ('DT', \&ComfortDTHandler);
		$comfort->SetReportCallback ('IP', \&ComfortIPHandler);
		$comfort->SetReportCallback ('MD', \&ComfortMDHandler);
		$comfort->SetReportCallback ('M?', \&ComfortMDHandler);
		$comfort->SetReportCallback ('AM', \&ComfortAMARHandler);
		$comfort->SetReportCallback ('AR', \&ComfortAMARHandler);
		$comfort->SetReportCallback ('EX', \&ComfortEXHandler);

		Print ("Requesting alarm state ...");
		$comfort->Send ('M?');
		$comfort->Send ('Z?');
	}

	if ($adjustDateTime)
	{
		my $tm = time;

		# Adjust the time once an hour, 06:37 seconds past the hour
		if ($tm % 3600 == 6*60 + 37)
		{
			if ($comfort->SetDateTime ($tm))
			{
				Print ("Set Date/Time to ", scalar localtime ($tm));
				$adjustDateTime = 0;
			}
			else
			{
				Print ("Failed to set Date/Time: ", $comfort->GetLastErrorMsg());
			}
		}
	}

	my ($msg, $type) = $comfort->Receive (COMFORT_RECEIVE_TIMEOUT);
	if ($msg && $msg ne 'OK')
	{
		Print "Got: [$type, $msg]";
		&ComfortResultHandler ($comfort, $type, $msg);
	}

	if (! $terminated)
	{
		$mqtt->tick (MQTT_TICK_TIMEOUT/1000.0);
	}
}

Print "Terminating ...";

$comfort->Logout();
$comfort->Disconnect();

Print "Terminated.";

exit 0;


sub GetUserName ($)
{
	my ($user) = @_;
	return $user == $comfort->COMFORT_USER_KEYPAD ? 'keypad' : $user;
}


sub ArmToMode ($$)
{
	my ($comfort, $mode) = @_;

	my $key =
		$mode == $comfort->COMFORT_ARM_NIGHT    ? $comfort->COMFORT_KEY_NIGHT :
		$mode == $comfort->COMFORT_ARM_DAY      ? $comfort->COMFORT_KEY_DAY :
		$mode == $comfort->COMFORT_ARM_AWAY     ? $comfort->COMFORT_KEY_AWAY :
		$mode == $comfort->COMFORT_ARM_OFF      ? '' : undef;

	if ($key)
	{
		return $comfort->SendKey ($key);
	}
	else
	{
		return $comfort->SetArmMode ($mode, PASSWORD);
	}
}


sub MqttComfortCallback
{
	my ($topic, $msg) = @_;

	my $result = '';
	my ($t1, $op, @params) = split (/\//, $topic);
	my $cmd = pop @params;
	my $n = scalar (@params);

	Print "Received MQTT COMFORT msg: $topic:$msg ($op: $cmd [@params])";
	if ($op eq 'set')
	{
		if ($cmd eq 'login' && $n == 0)
		{
			$comfort->Logout();
			if (! ($result = $comfort->Login ($msg)))
			{
				$loggedIn = 0;
			}
		}
		elsif ($cmd eq 'logout' && $n == 0)
		{
			$result = $comfort->Logout();
			$loggedIn = 0;
		}
		elsif ($cmd eq 'key' && $n == 0)
		{
			$result = $comfort->SendKey ($msg);
		}
		elsif ($cmd eq 'output' && $n == 1)
		{
			my ( $output ) = @params;
			Print "Received output request for $output = $msg";
			if (exists ($OUTPUT_STATUS{uc ($msg)}))
			{
				$result = $comfort->SetOutput ($output, $OUTPUT_STATUS{uc ($msg)});
			}
			else
			{
				Print ("Unknown output msg: $msg");
			}
		}
		elsif ($cmd eq 'arm' && $n == 0)
		{
			my $mode = $ARM_STATUS{uc ($msg)};
			$result = ArmToMode ($comfort, $mode);
		}
		elsif ($cmd eq HASS_STATE_TOPIC && $n == 0)
		{
			my $state = lc ($msg);
			my $mode = (grep { $HASS_ARM_STATE{$_} eq $state } keys %HASS_ARM_STATE)[0];

			$result = ArmToMode ($comfort, $mode);
		}
		else
		{
			$result = $comfort->Send ($msg);
		}
	}
	elsif ($op eq 'get')
	{
		if ($cmd eq 'date' && $n == 0)
		{
			$result = $comfort->Send ('DT');
		}
		elsif ($cmd eq 'arm' && $n == 0)
		{
			$result = $comfort->Send ('M?');
		}
	}

	if (! defined ($result))
	{
		Print $comfort->GetLastErrorMsg();
	}
}



sub MqttCbusCallback
{
	my ($topic, $value) = @_;
	my ($t1, $op, $app, $group, $cmd) = split (/\//, $topic, 5);
	Print "Received MQTT CBUS msg: $topic = $value: app = $app, group = $group";

	if ($op eq 'set')
	{
		my $level = $value;
		{
			no warnings 'numeric';
			$level += 0;
		}

		my $cbusCmd = $comfort->CBUS_RAMP_OFF;
		if ($app && $group && $cmd)
		{
			$value = uc ($value);
			if ($value eq 'ON' || $value eq 'TRUE')
			{
				$level = 255;
			}
			elsif ($value eq 'OFF' || $value eq 'FALSE')
			{
				$level = 0;
			}


			if ($cmd eq 'switch')
			{
				if ($level > 0)
				{
					$level = 255;
				}

				if ($level > 0)
				{
					$cbusCmd = $comfort->CBUS_RAMP_ON;
				}
			}
			elsif ($cmd eq 'ramp')
			{
				if ($level > 0)
				{
					$cbusCmd = $comfort->CBUS_RAMP_0;
				}

				if ($value =~ /,(\d+)$/)
				{
					if (exists $rampLookup{$1})
					{
						$cbusCmd = $rampLookup{$1};
					}
				}
			}
			else
			{
				return;
			}

			Print "Sending CBUS cmd to group $group, application $app: $level";
			if (! $comfort->SendCbusCommand ($group, $cbusCmd, $level, $app))
			{
				Print $comfort->GetLastErrorMsg();
			}
		}
	}
	elsif ($op eq 'get')
	{
		if (($cmd eq 'level' || $cmd eq 'switch') && $app == $comfort->CBUS_APPLICATION_LIGHTING)
		{
			$comfort->Send ('C?'.sprintf ('%02X', $group));
		}
	}
	else
	{
		Print "Unknown operation $op";
	}
}



sub SendMqttMsg
{
	my ($topics, $key, $value, $retain) = @_;

	my $topic = join ('/', @{$topics}, $key);
	Print "Sending MQTT msg: $topic = $value";

	if ($retain)
	{
		$mqtt->retain ($topic => $value);
	}
	else
	{
		$mqtt->publish ($topic => $value);
	}
}



sub SendMqttReportMsg ($$$$)
{
	my ($topics, $reportType, $value, $retain) = @_;
	SendMqttMsg ([ MQTT_COMFORT_PUBLISH_TOPIC, @{$topics} ], $REPORT_TOPIC{$reportType}, $value, $retain);
}



sub ComfortLogger
{
	my ($type, $msg) = @_;
	Print (($type == $comfort->LOG_SEND ? 'Sent    ' : 'Received'), ': [', $msg, ']');
}


sub ComfortHandler
{
	Print ("CTHandler: @_");
}



sub ComfortIPHandler
{
	my ($comfort, $type, $zone, $msg) = @_;

	$msg = $msg == 0 ? 'OFF' : 'ON';
	my $retain = 0;
	if ($type eq 'IP' && exists ($RETAIN_INPUT{$zone}))
	{
		$retain = 1;
	}

	SendMqttReportMsg ([ $zone ], $type, $msg, $retain);
}


sub ComfortCTHandler
{
	my ($comfort, $type, $counter, $msg) = @_;
	if ($counter <128)
	{
		my @topics = (MQTT_CBUS_PUBLISH_TOPIC, $comfort->CBUS_APPLICATION_LIGHTING, $counter); 

		Print ("CBUS status report: ", join ('/', @topics), " $msg");

		SendMqttMsg (\@topics, 'switch', $msg == 0 ? 'OFF' : 'ON', 1);
		SendMqttMsg (\@topics, 'level',  $msg, 1);
	}

	SendMqttReportMsg ([ $counter ], $type, $msg, 0);
}



sub ComfortDTHandler
{
	my ($comfort, $type, $tm) = @_;

	my $timeDiff = abs (time - $tm);
	if ($timeDiff >= ALLOWED_TIME_DEVIATION)
	{
		Print ("Time scew of $timeDiff seconds detected.  Date/Time will be adjusted.");
		$adjustDateTime = 1;
	}
}


sub ComfortMDHandler
{
	my ($comfort, $type, $armMode, $user) = @_;
	my $armModeName = (grep { $ARM_STATUS{$_} == $armMode } keys %ARM_STATUS)[0];

	SendMqttReportMsg ([ GetUserName ($user) ], $type, $armModeName, 0);

	# Report the state to home assistant
	SendMqttMsg ([ MQTT_COMFORT_PUBLISH_TOPIC ], HASS_STATE_TOPIC, $HASS_ARM_STATE{$armMode}, 1);
}


sub ComfortAMARHandler
{
	my ($comfort, $type, $alarm, $param) = @_;
	$param //= '';

	my ($alarmName, $triggered, $alarmType) = @{$ALARM_TYPE{$alarm}};
	if ($alarmType == ALARM_USER)
	{
		$param = GetUserName ($param);
	}

	SendMqttMsg ([ MQTT_COMFORT_PUBLISH_TOPIC, $REPORT_TOPIC{$type} ], $alarmName, $param, 0);

	# Report the state to home assistant
	if ($type eq 'AM' && $triggered)
	{
		SendMqttMsg ([ MQTT_COMFORT_PUBLISH_TOPIC ], HASS_STATE_TOPIC, HASS_STATE_TRIGGERED, 1);
	}
}


sub ComfortEXHandler
{
	my ($comfort, $type, $entryOrExit, $delay) = @_;
	
	SendMqttMsg ([ MQTT_COMFORT_PUBLISH_TOPIC, $ENTRY_EXIT{$entryOrExit} ], $delay, 0);

	# Report the state to home assistant
	SendMqttMsg ([ MQTT_COMFORT_PUBLISH_TOPIC ], HASS_STATE_TOPIC, HASS_STATE_PENDING, 1);
}


sub ComfortResultHandler
{
	my ($comfort, $type, $msg) = @_;
	$type //= 'unknown';

	if (exists $REPORT_TOPIC{$type})
	{
		$type = $REPORT_TOPIC{$type};
	}

	SendMqttMsg ([ MQTT_COMFORT_PUBLISH_TOPIC, 'raw' ], $type, $msg, 0);
}

